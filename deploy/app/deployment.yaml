apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bf42-stats-pvc
  namespace: bf42-stats
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 128Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bf42-stats
  namespace: bf42-stats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bf42-stats
  template:
    metadata:
      labels:
        app: bf42-stats
    spec:
      priorityClassName: 1942-services
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      initContainers:
        - name: restore-sqlite
          image: mcr.microsoft.com/azure-cli:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Check if database already exists
              if [ -f "/mnt/data/playertracker.db" ]; then
                echo "Database already exists, skipping restore"
                exit 0
              fi

              # Download SQLite backup from Azure Storage
              echo "Downloading SQLite backup..."
              az storage blob download \
                --container-name sqlite \
                --name playertracker_backup.db \
                --file /mnt/data/playertracker.db \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING"

              # Set correct ownership
              chown 1000:1000 /mnt/data/playertracker.db
              echo "SQLite restore completed"
          env:
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: storage-secret
                  key: connection-string
          volumeMounts:
            - name: stats-data
              mountPath: /mnt/data
          securityContext:
            runAsUser: 0  # Run as root for chown
      containers:
        - name: nginx
          image: dylanmunyard/bf42-stats:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: DB_PATH
              value: "/mnt/data/playertracker.db"
            - name: ASPNETCORE_URLS
              value: "http://+:8080"
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
            - name: SEQ_URL
              value: "http://seq-k3s:5341"
            - name: LOKI_URL
              value: "http://loki.monitoring:3100"
            - name: TEMPO_URL
              value: "http://tempo.monitoring:3200"
            - name: OTLP_ENDPOINT
              value: "http://tempo.monitoring:4318/v1/traces"
            - name: CLICKHOUSE_URL
              value: "http://clickhouse-service.clickhouse:8123"
            - name: CLICKHOUSE_WRITE_URL
              value: "http://clickhouse-service.clickhouse:8123"
            - name: PLAYER_ROUNDS_BATCH_SIZE
              value: "100000"
            - name: REDIS_CONNECTION_STRING
              value: "redis-service.bf42-stats:6379"
            - name: ENABLE_CLICKHOUSE_ROUND_SYNCING
              value: "true"
            - name: ENABLE_GAMIFICATION_PROCESSING
              value: "true"
            - name: ENABLE_PLAYER_METRICS_SYNCING
              value: "true"
            - name: ENABLE_SERVER_ONLINE_COUNTS_SYNCING
              value: "true"
            - name: GAMIFICATION_MAX_CONCURRENT_ROUNDS
              value: "10"
            - name: PLAYER_INSIGHTS_MAX_CONCURRENT_QUERIES
              value: "10"
            - name: DiscordOAuth__ClientId
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: discord-client-id
            - name: DiscordOAuth__ClientSecret
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: discord-client-secret
            - name: Jwt__Issuer
              value: "https://1942.munyard.dev"
            - name: Jwt__Audience
              value: "https://1942.munyard.dev"
            - name: Cors__AllowedOrigins
              value: "https://1942.munyard.dev"
            # Bot Detection Configuration
            - name: BotDetection__DefaultPlayerNames__0
              value: "BFPlayer"
            - name: BotDetection__DefaultPlayerNames__1
              value: "Player"
            - name: BotDetection__DefaultPlayerNames__2
              value: "BFSoldier"
            # Server Filtering Configuration
            - name: ServerFiltering__StuckServers__0
              value: "Tragic! [USA] - Dallas"
            # Refresh token cookie configuration (Secret provided via external secret manager)
            - name: RefreshToken__CookieName
              value: "rt"
            - name: RefreshToken__CookieDomain
              value: "1942.munyard.dev"
            - name: RefreshToken__CookiePath
              value: "/stats"
            - name: RefreshToken__Days
              value: "60"
            # Secrets from Kubernetes Secret `bf42-stats-secrets`
            - name: Jwt__PrivateKey
              valueFrom:
                secretKeyRef:
                  name: bf42-stats-secrets
                  key: jwt-private-key
            - name: RefreshToken__Secret
              valueFrom:
                secretKeyRef:
                  name: bf42-stats-secrets
                  key: refresh-token-secret
          volumeMounts:
            - name: stats-data
              mountPath: /mnt/data
      volumes:
        - name: stats-data
          persistentVolumeClaim:
            claimName: bf42-stats-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: bf42-stats-service
  namespace: bf42-stats
  labels:
    app: bf42-stats
  annotations:
    tailscale.com/expose: "true"
    tailscale.com/hostname: bf42-stats-service
spec:
  selector:
    app: bf42-stats
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      name: api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: bf42-stats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      priorityClassName: 1942-services
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          args:
            - redis-server
            - --appendonly
            - "yes"
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: bf42-stats
  labels:
    app: redis
spec:
  selector:
    app: redis
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-commander
  namespace: bf42-stats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
    spec:
      containers:
        - name: redis-commander
          image: erikdubbelboer/phpredisadmin:latest
          ports:
            - containerPort: 80
          env:
            - name: REDIS_1_HOST
              value: "redis-service.bf42-stats"
            - name: REDIS_1_PORT
              value: "6379"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-commander-service
  namespace: bf42-stats
  labels:
    app: redis-commander
spec:
  selector:
    app: redis-commander
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      name: web

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqlite-browser
  namespace: bf42-stats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sqlite-browser
  template:
    metadata:
      labels:
        app: sqlite-browser
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: sqlite-browser
          image: alpine:latest
          ports:
            - containerPort: 8080
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Install Python and sqlite-web
              apk add --no-cache python3 py3-pip sqlite
              pip3 install sqlite-web --break-system-packages
              # Start the web interface
              sqlite_web /mnt/data/playertracker.db --host 0.0.0.0 --port 8080
          volumeMounts:
            - name: stats-data
              mountPath: /mnt/data
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: stats-data
          persistentVolumeClaim:
            claimName: bf42-stats-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: sqlite-browser-service
  namespace: bf42-stats
  labels:
    app: sqlite-browser
  annotations:
    tailscale.com/expose: "true"
    tailscale.com/hostname: sqlite-browser-aks
spec:
  selector:
    app: sqlite-browser
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      name: web