// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using junie_des_1942stats.PlayerTracking;

#nullable disable

namespace junie_des_1942stats.Migrations
{
    [DbContext(typeof(PlayerTrackerDbContext))]
    [Migration("20250921101847_AddCurrentMapToGameServer")]
    partial class AddCurrentMapToGameServer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("junie_des_1942stats.PlayerStats.Models.ServerBestScoreRaw", b =>
                {
                    b.Property<int>("BestScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BestScoreDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalKills")
                        .HasColumnType("INTEGER");

                    b.ToTable("ServerBestScoreRaw");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.GameServer", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentMap")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForumUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GeoLookupDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JoinLink")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeenTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Loc")
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Org")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.Player", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AiBot")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPlayTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.PlayerObservation", b =>
                {
                    b.Property<int>("ObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ping")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ObservationId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("SessionId", "Timestamp");

                    b.ToTable("PlayerObservations");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.PlayerSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentPing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentTeam")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentTeamLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeenTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObservationCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoundId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalKills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("SessionId");

                    b.HasIndex("RoundId");

                    b.HasIndex("IsActive", "LastSeenTime");

                    b.HasIndex("RoundId", "PlayerName");

                    b.HasIndex("ServerGuid", "LastSeenTime");

                    b.HasIndex("PlayerName", "ServerGuid", "IsActive");

                    b.HasIndex("ServerGuid", "StartTime", "MapName");

                    b.ToTable("PlayerSessions");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByTokenHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.Round", b =>
                {
                    b.Property<string>("RoundId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParticipantCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoundTimeRemain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Team1Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Team2Label")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tickets1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tickets2")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoundId");

                    b.HasIndex("IsActive");

                    b.HasIndex("MapName");

                    b.HasIndex("ServerGuid")
                        .IsUnique()
                        .HasFilter("IsActive = 1");

                    b.HasIndex("ServerGuid", "EndTime");

                    b.HasIndex("ServerGuid", "StartTime");

                    b.ToTable("Rounds", t =>
                        {
                            t.HasCheckConstraint("CK_Round_EndTime", "EndTime IS NULL OR EndTime >= StartTime");
                        });
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.RoundObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoundId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoundTimeRemain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Team1Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("Team2Label")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tickets1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tickets2")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("RoundId", "Timestamp");

                    b.ToTable("RoundObservations");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.ServerPlayerRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("KDRatio")
                        .HasColumnType("REAL");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalKills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPlayTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerName");

                    b.HasIndex("ServerGuid", "Rank");

                    b.HasIndex("ServerGuid", "PlayerName", "Year", "Month")
                        .IsUnique();

                    b.ToTable("ServerPlayerRankings");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserBuddy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuddyPlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuddyPlayerName");

                    b.HasIndex("UserId", "BuddyPlayerName")
                        .IsUnique();

                    b.ToTable("UserBuddies");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserFavoriteServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ServerGuid");

                    b.HasIndex("UserId", "ServerGuid")
                        .IsUnique();

                    b.ToTable("UserFavoriteServers");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserPlayerName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerName");

                    b.HasIndex("UserId", "PlayerName")
                        .IsUnique();

                    b.ToTable("UserPlayerNames");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.PlayerObservation", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.PlayerSession", "Session")
                        .WithMany("Observations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.PlayerSession", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.Player", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("junie_des_1942stats.PlayerTracking.Round", null)
                        .WithMany("Sessions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("junie_des_1942stats.PlayerTracking.GameServer", "Server")
                        .WithMany("Sessions")
                        .HasForeignKey("ServerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.RefreshToken", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.Round", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.GameServer", "GameServer")
                        .WithMany()
                        .HasForeignKey("ServerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameServer");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.ServerPlayerRanking", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.Player", "Player")
                        .WithMany("PlayerRankings")
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("junie_des_1942stats.PlayerTracking.GameServer", "Server")
                        .WithMany("PlayerRankings")
                        .HasForeignKey("ServerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserBuddy", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.Player", "Player")
                        .WithMany()
                        .HasForeignKey("BuddyPlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("junie_des_1942stats.PlayerTracking.User", "User")
                        .WithMany("Buddies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserFavoriteServer", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.GameServer", "Server")
                        .WithMany()
                        .HasForeignKey("ServerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("junie_des_1942stats.PlayerTracking.User", "User")
                        .WithMany("FavoriteServers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.UserPlayerName", b =>
                {
                    b.HasOne("junie_des_1942stats.PlayerTracking.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("junie_des_1942stats.PlayerTracking.User", "User")
                        .WithMany("PlayerNames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.GameServer", b =>
                {
                    b.Navigation("PlayerRankings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.Player", b =>
                {
                    b.Navigation("PlayerRankings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.PlayerSession", b =>
                {
                    b.Navigation("Observations");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.Round", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("junie_des_1942stats.PlayerTracking.User", b =>
                {
                    b.Navigation("Buddies");

                    b.Navigation("FavoriteServers");

                    b.Navigation("PlayerNames");
                });
#pragma warning restore 612, 618
        }
    }
}
